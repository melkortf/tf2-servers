name: Check for TF2 Updates

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check_update:
    runs-on: ubuntu-latest
    outputs:
      new_update_detected: ${{ steps.check.outputs.new_update_detected }}
      update_gid: ${{ steps.check.outputs.update_gid }}
      update_title: ${{ steps.check.outputs.update_title }}
      update_url: ${{ steps.check.outputs.update_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define state file path
        id: paths
        run: |
          STATE_DIR=".github/tf2_state"
          STATE_FILE="$STATE_DIR/last_update.gid"
          echo "STATE_DIR=$STATE_DIR" >> $GITHUB_OUTPUT
          echo "STATE_FILE=$STATE_FILE" >> $GITHUB_OUTPUT

      - name: Create State Directory if needed
        run: mkdir -p ${{ steps.paths.outputs.STATE_DIR }}

      - name: Get last processed update GID
        id: get_last_id
        run: |
          # Default to 0 if file doesn't exist or is empty
          last_id=$(cat "${{ steps.paths.outputs.STATE_FILE }}" 2>/dev/null || echo "0")
          if [[ -z "$last_id" ]]; then
            last_id="0"
          fi
          echo "last_id=$last_id" >> $GITHUB_OUTPUT

      - name: Fetch latest TF2 news from Steam API
        id: fetch
        run: |
          response=$(curl -fs --connect-timeout 10 --max-time 20 "https://api.steampowered.com/ISteamNews/GetNewsForApp/v2/?appid=440&count=5&format=json")
          curl_exit_code=$?

          if [[ $curl_exit_code -ne 0 ]]; then
             echo "::error::curl command failed with exit code $curl_exit_code. Could not fetch data from Steam API."
             exit 1
          fi

          if [[ ! "$response" =~ ^\{ ]]; then
             echo "::error::Steam API response does not look like valid JSON. Response received:"
             echo "$response" # Log the potentially problematic HTML response
             exit 1
          fi

          if ! jq -e '.appnews.newsitems' <<< "$response" > /dev/null; then
            echo "::error::Steam API JSON response is missing expected '.appnews.newsitems'. Response was:"
            echo "$response" # Log the problematic JSON response
            exit 1
          fi

          echo "response_data<<EOF" >> $GITHUB_OUTPUT
          echo "$response" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check for new update
        id: check
        env:
          JSON_DATA: ${{ steps.fetch.outputs.response_data }}
        run: |
          last_processed_gid="${{ steps.get_last_id.outputs.last_id }}"
          echo "Last processed Valve update GID: $last_processed_gid"

          if [[ -z "$JSON_DATA" ]]; then
             echo "::error::JSON_DATA environment variable is empty. Cannot process."
             exit 1
          fi

          latest_valve_update=$(printf '%s' "$JSON_DATA" | jq -c '.appnews.newsitems | map(select(.title == "Team Fortress 2 Update Released" and .author == "Valve")) | sort_by(.date) | .[-1]')
          jq_exit_code=$?

          if [[ $jq_exit_code -ne 0 ]]; then
             echo "::error::jq command failed with exit code $jq_exit_code"
             echo "${JSON_DATA:0:500}..."
             exit 1
          fi

          # Check if an update was found (jq outputs 'null' if empty array or explicit null)
          if [[ -z "$latest_valve_update" || "$latest_valve_update" == "null" ]]; then
            echo "No new update post by 'Valve' found matching criteria in the latest news items."
            echo "new_update_detected=false" >> $GITHUB_OUTPUT
            exit 0 # Exit successfully, no update found
          fi

          latest_gid=$(printf '%s' "$latest_valve_update" | jq -r '.gid')
          latest_title=$(printf '%s' "$latest_valve_update" | jq -r '.title')
          latest_url=$(printf '%s' "$latest_valve_update" | jq -r '.url')

          if [[ -z "$latest_gid" || "$latest_gid" == "null" ]]; then
            echo "::error::Failed to extract 'gid' from the filtered update object."
            echo "Filtered update object: $latest_valve_update"
            exit 1
          fi

          echo "Latest 'Valve' update found GID: $latest_gid"
          echo "Title: $latest_title"

          # Compare with the last processed GID
          if [[ "$latest_gid" != "$last_processed_gid" ]]; then
            echo "New TF2 update detected! GID: $latest_gid"
            echo "new_update_detected=true" >> $GITHUB_OUTPUT
            echo "update_gid=$latest_gid" >> $GITHUB_OUTPUT
            echo "update_title=$latest_title" >> $GITHUB_OUTPUT
            echo "update_url=$latest_url" >> $GITHUB_OUTPUT
            echo "$latest_gid" > "${{ steps.paths.outputs.STATE_FILE }}"
          else
            echo "Latest 'Valve' update (GID: $latest_gid) already processed."
            echo "new_update_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push updated GID file
        if: steps.check.outputs.new_update_detected == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add "${{ steps.paths.outputs.STATE_FILE }}"
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "State file GID is already up-to-date. No commit needed."
          else
            echo "Committing updated state file..."
            git commit -m "chore: update last processed TF2 update GID to ${{ steps.check.outputs.update_gid }}"
            retry_count=0
            max_retries=3
            until git push || [ $retry_count -eq $max_retries ]; do
              retry_count=$((retry_count+1))
              echo "Push failed. Retrying (${retry_count}/${max_retries})..."
              sleep 5
            done
            if [ $retry_count -eq $max_retries ]; then
              echo "::error::Failed to push state file after multiple retries."
              exit 1
            fi
            echo "State file pushed successfully."
          fi

      - name: Trigger release workflow via repository_dispatch
        if: steps.check.outputs.new_update_detected == 'true'
        env:
          GITHUB_PAT: ${{ secrets.ACTIONS_PAT }}
          UPDATE_GID: ${{ steps.check.outputs.update_gid }}
          UPDATE_TITLE: ${{ steps.check.outputs.update_title }}
          UPDATE_URL: ${{ steps.check.outputs.update_url }}
        run: |
          echo "Triggering release.yml workflow..."
          response_code=$(curl -s -o /dev/null -w "%{http_code}" -L -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_PAT" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/dispatches" \
            -d '{
                  "event_type": "tf2-update-released",
                  "client_payload": {
                    "gid": "'"$UPDATE_GID"'",
                    "title": "'"$UPDATE_TITLE"'",
                    "url": "'"$UPDATE_URL"'"
                  }
                }')

          echo "Dispatch API response code: $response_code"
          if [[ "$response_code" -lt 200 || "$response_code" -ge 300 ]]; then
            echo "::error::Failed to trigger repository_dispatch event. Response code: $response_code"
            exit 1
          else
            echo "Successfully requested repository_dispatch event 'tf2-update-released'."
          fi
